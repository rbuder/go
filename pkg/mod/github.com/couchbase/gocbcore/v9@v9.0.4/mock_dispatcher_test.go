// Code generated by mockery v1.0.0. DO NOT EDIT.

package gocbcore

import mock "github.com/stretchr/testify/mock"

// mockDispatcher is an autogenerated mock type for the dispatcher type
type mockDispatcher struct {
	mock.Mock
}

// CollectionsEnabled provides a mock function with given fields:
func (_m *mockDispatcher) CollectionsEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DispatchDirect provides a mock function with given fields: req
func (_m *mockDispatcher) DispatchDirect(req *memdQRequest) (PendingOp, error) {
	ret := _m.Called(req)

	var r0 PendingOp
	if rf, ok := ret.Get(0).(func(*memdQRequest) PendingOp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PendingOp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*memdQRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DispatchDirectToAddress provides a mock function with given fields: req, pipeline
func (_m *mockDispatcher) DispatchDirectToAddress(req *memdQRequest, pipeline *memdPipeline) (PendingOp, error) {
	ret := _m.Called(req, pipeline)

	var r0 PendingOp
	if rf, ok := ret.Get(0).(func(*memdQRequest, *memdPipeline) PendingOp); ok {
		r0 = rf(req, pipeline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(PendingOp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*memdQRequest, *memdPipeline) error); ok {
		r1 = rf(req, pipeline)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequeueDirect provides a mock function with given fields: req, isRetry
func (_m *mockDispatcher) RequeueDirect(req *memdQRequest, isRetry bool) {
	_m.Called(req, isRetry)
}

// SetPostCompleteErrorHandler provides a mock function with given fields: handler
func (_m *mockDispatcher) SetPostCompleteErrorHandler(handler postCompleteErrorHandler) {
	_m.Called(handler)
}

// SupportsCollections provides a mock function with given fields:
func (_m *mockDispatcher) SupportsCollections() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
